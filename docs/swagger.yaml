basePath: /api
definitions:
  api.AuthResponse:
    properties:
      token:
        type: string
    type: object
  api.AuthUserInput:
    properties:
      email:
        maxLength: 128
        type: string
      password:
        maxLength: 64
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  api.CreateUserInput:
    properties:
      email:
        maxLength: 128
        type: string
      name:
        maxLength: 128
        type: string
      password:
        maxLength: 64
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  api.UpdateUserInput:
    properties:
      avatar:
        type: string
      bio:
        maxLength: 512
        type: string
      birth_date:
        type: string
      name:
        maxLength: 128
        type: string
    required:
    - name
    type: object
host: localhost:8080
info:
  contact:
    email: hickar@icloud.com
    name: Hickar
    url: https://hickar.space
  description: Minimal API written on gin framework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gin-Rush API
  version: "1.0"
paths:
  /authorize:
    post:
      consumes:
      - application/json
      description: Method for authorizing user with credentials, returning signed
        jwt in response
      parameters:
      - description: JSON with credentials
        in: body
        name: login_user
        required: true
        schema:
          $ref: '#/definitions/api.AuthUserInput'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.AuthResponse'
            - properties:
                token:
                  type: string
              type: object
        "404":
          description: ""
        "422":
          description: ""
      summary: Authorize user with username/password
  /user:
    patch:
      consumes:
      - application/json
      description: 'Method for updating user info: name, bio, avatar and birth date'
      parameters:
      - description: JSON with user info
        in: body
        name: update_user
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserInput'
      responses:
        "204":
          description: ""
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "422":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update user info
    post:
      consumes:
      - application/json
      description: Create new user with credentials provided in request. Response
        contains user JWT.
      parameters:
      - description: JSON with user credentials
        in: body
        name: new_user
        required: true
        schema:
          $ref: '#/definitions/api.CreateUserInput'
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/api.AuthResponse'
            - properties:
                token:
                  type: string
              type: object
        "409":
          description: ""
        "422":
          description: ""
      summary: Create new user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
